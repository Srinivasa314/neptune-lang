const {assert_eq,assert_failed} = import("assert.np")

// Single line comment

/* Multiline comment
   /* nested comment */
*/

//ASI Tests

let foo1 = (
    1
    +
    1
)
assert_eq(foo1,2)
let foo2 = {
    a
    :
    1,
}
assert_eq(foo2
.a,1);


assert_eq([1,2,],[1,2])
assert_failed(||assert_eq([],[1]),Error,'Assertion failed: []==[ 1 ]')
assert_failed(||assert_eq([1,2],[1,3]),Error,'Assertion failed: [ 1, 2 ]==[ 1, 3 ]')

assert_eq(1+1,2)
assert_eq(1+(2+3),(1+2)+3)
assert_eq("\(1+1)","2")
assert_eq('a'~'b','ab');
assert_eq(0.1+0.2,0.3)
assert_eq(1+0.2,1.2)
assert_eq(0.3+9,9.3)
assert_eq(0o156,110)
assert_eq(0xfa8e,64142)
assert_eq(1.1e3,1100.0)
assert_eq(1e4,10000.0)
assert_eq(5%2,1)
assert_eq((5.9%2-1.9)<0.0001,true)
assert_eq("\(1.0/0.0)", "inf")
assert_eq("\(-1.0/0.0)", "-inf")
assert_eq("\(0.0/0.0)"=="NaN" or "\(0.0/0.0)"=="-NaN",true)
assert_failed(||'a'>'b',TypeError,'Cannot compare types String and String')

assert_eq(1==1,true)
assert_eq(1==1.0,true)
assert_eq(1.0==1,true)
assert_eq(1==2,false)
assert_eq(2==1.0,false)
assert_eq(1==2,false)
assert_eq(1.0==1.0,true)
assert_eq(1.0==2,false)
assert_eq(2.0==1,false)
assert_eq(1.0==2.0,false)
assert_eq("a"=="ab",false)
assert_eq("a"=="a",true)
assert_eq(7=="a",false)
assert_eq(1..2==1..2,true)
assert_eq(1..2==3..4,false)
assert_eq({}=={},false)
assert_eq(true==null,false)
assert_eq(null==null,true)

assert_eq(1<2,true)
assert_eq(2.2>=1,true)
assert_eq(4>3.2,true)

assert_eq(@abc,@abc)
assert_eq(1,1)
assert_eq(1.0,1.0)
assert_eq(true,true)
assert_eq(1===1.0,false)
assert_eq(1.0===2.0,false)
assert_eq(1===2,false)
assert_eq(false===true,false)
assert_eq('a','a')
assert_eq("a"==="ab",false)
assert_eq(@a===@ab,false)
assert_eq(1..2,1..2)
assert_eq(1..2===3..4,false)
assert_eq([]===[],false)
let obj = {}
assert_eq(obj,obj)
assert_eq(obj!=obj,false)



assert_eq(!false,true)
assert_eq(!null,true)
assert_eq(!'',false)
assert_eq(![],false)

let a=[0]
a[0]=a
assert_eq("\(a)","[ [ [ [ [ [ [ [ [ [ [ [ ... ] ] ] ] ] ] ] ] ] ] ] ]")

let m=null
for i in 0..50 {
    m=Map {@next:m}
}
assert_eq("\(m)","Map { @next: Map { @next: Map { @next: Map { @next: Map { @next: Map { @next: Map { @next: Map { @next: Map { @next: Map { @next: Map { @next: Map { ... } } } } } } } } } } } }")
assert_failed(||{let x=2147483647;x+1},OverflowError,"Cannot add 2147483647 and 1 as the result does not fit in an Int")
assert_failed(||{let x=-2147483647;x-5},OverflowError,"Cannot subtract -2147483647 and 5 as the result does not fit in an Int")
assert_failed(||{let x=1000000;x*1000000},OverflowError,"Cannot multiply 1000000 and 1000000 as the result does not fit in an Int")
assert_failed(||{let x=1;x/0},OverflowError,"Cannot divide 1 and 0 as the result does not fit in an Int")
assert_failed(||{let x=-2147483648;x/-1},OverflowError,"Cannot divide -2147483648 and -1 as the result does not fit in an Int")
assert_failed(||{let x=1;x%0},OverflowError,"Cannot mod 1 and 0 as the result does not fit in an Int")
assert_failed(||'a'%9,TypeError,"Cannot mod types String and Int")
assert_eq(-2147483648%-1,0)
assert_failed(||{let x=-2147483647-1;x=-x},OverflowError,"Cannot negate -2147483648 as the result cannot be stored in an Int")
assert_failed(||'a'+'b',TypeError,"Cannot add types String and String")
assert_failed(||'a'+1,TypeError,"Cannot add types String and Int")


let i=0

{
    let i = 3
    assert_eq(i,3)
}

while i < 100 {
    if i === 56 {
        break
    }
    i+=1
}
assert_eq(i, 56)

if i==2
{
    i=7
} else{
    i=8
}
assert_eq(i,8)

if i==8{
    i=6
}else{
    i=7
}
assert_eq(i,6)

while i<10 {
    i=i+1
}
assert_eq(i,10)

assert_failed(||{for i in 'a'..1{}},TypeError,"Expected Int and Int for the start and end of the range got String and Int instead")
let g=null
for i in 1..10
{
    g=i
    if i==7{
        break
    }
}
assert_eq(g,7)

g=0
for i in 1..10{
    if i==7{
        continue
    }
    g+=i
}
assert_eq(g,38)

i=0
while i < 100 {
    i+=1
    if i>30 {
        continue
    }
    g+=1
}
assert_eq(g,68)


for i in 100..100{g+=1}
for i in 1000..100{g+=1}
assert_eq(g,68)

fun sum(n) {
    if n === 0 {
        return 0
    } else {
        return n + sum(n-1)
    }
}

assert_eq(sum(30),465)


fun fib(n){
    if n<2{
        return n
    }
    return fib(n-1)+fib(n-2)
}
assert_eq(fib(6),8)
assert_failed(||fib(),ArgumentError,'Function fib takes 1 arguments but 0 were given')
assert_failed(||6(),TypeError,'Type Int is not callable')
fun f0(){}
assert_eq(f0(),null)


fun f1(){
    let a=10
    let b=20
    return ||a
    return ||b
}
assert_eq(f1()(),10)

fun counter(){
    let count = 0
    let closure = ||{count+=1;return count}
    assert_eq(closure(),1)
    return closure
}
let c=counter()
assert_eq(c(),2)
assert_eq(c(),3)



a=new Array(3,null)
for i in 0..3{
    a[i]=||i
}
assert_eq(a[0](),0)
assert_eq(a[1](),1)
assert_eq(a[2](),2)

let r = 10..13
for i in r {
    a[i-10]=||i
}
assert_eq(a[0](),10)
assert_eq(a[1](),11)
assert_eq(a[2](),12)

let g3=null
fun g1(){
    let a=5;
    fun g2(){
        g3=||a
    }
    g2()
}
g1()
assert_eq(g3(),5)

fun f2(){
    let a=17
    g=||a
    throw ''
}
try{
    f2()
}
catch e{}
assert_eq(g(),17)

try{try{throw ''}catch e{g=10}}catch e{g=20}
assert_eq(g,10)


class A{}
assert_eq(A.getSuper(),Object)
assert_failed(||new A(),NoMethodError,'Class A does not have a constructor')
class B{construct(){}f(){return 3;}}
assert_eq(new B().f(),3)
class C extends B{construct(){}f(){return super.f()+5;}}
assert_eq(new C().f(),8)
assert_eq({a:5}.a,5)
assert_failed(||new C().f(3),ArgumentError,'Function f takes 0 arguments but 1 were given')
assert_failed(||({}.x),PropertyError,'object does not have any property named x')
assert_failed(||({}.f()),NoMethodError,'object does not have any method named f')
assert_failed(||1.x,TypeError,'Cannot get property from type Int')
assert_failed(||{1.x=5},TypeError,'Cannot set property for type Int')
let o={x:||3}
assert_eq(o.x(),3)
o={a:5}
assert_eq(o[@a],5)
assert_failed(||o[@b],PropertyError,'Property @b does not exist in object')
assert_failed(||o[1],TypeError,'Object indices must be Symbol not Int')
o[@b]=10
assert_eq(o.b,10)
assert_failed(||{o['b']=10},TypeError,'Object indices must be Symbol not String')

{
    let {x,y}={x:1,y:2}
    assert_eq(x,1)
    assert_eq(y,2)
}
const vm=import('vm')
assert_failed(||vm.x,NoModuleVariableError,'Module vm does not export any variable named x')

assert_eq(Int.name(),'Int')
assert_eq(Int.getSuper(),Object)
assert_eq(Object.getSuper(),null)
assert_eq(2.getClass(),Int)
assert_eq(''.getClass(),String)
assert_eq(new B().getClass(),B)
assert_failed(||new 3(),TypeError,'new can be called only on classes not Int')
assert_failed(||{class A extends 3{}},TypeError,'Expected to inherit from Class got Int')
assert_failed(||{class A extends Int{}},TypeError, 'Cannot inherit from native class Int')


assert_eq(new Int(),0)
assert_eq(new Float(),0.0)
assert_eq(new Bool(),false)
assert_eq(new Null(),null)
assert_eq(new Symbol('abc'),@abc)

a=[]
assert_failed(||a[0],IndexError, "Array index out of range")
assert_failed(||a[-1], IndexError,"Array index out of range")
assert_failed(||a[0.0], TypeError,"Array indices must be Int or Range not Float")
a=[1,2]
assert_eq(a.len(),2)
assert_eq(a.pop(),2)
assert_eq(a.pop(),1)
assert_failed(||a.pop(),IndexError,'Cannot pop from empty array')
a.push(3)
assert_eq(a[0],3)
a.insert(1,4)
assert_eq(a[1],4)
assert_failed(||a.insert(10,4),IndexError,'Array index out of range')
a.remove(0)
assert_eq(a[0],4)
assert_failed(||a.remove(10),IndexError,'Array index out of range')
a.clear()
assert_eq(a.len(),0)
a=new Array(10,3)
assert_eq(a.len(),10)
assert_eq(a[7],3)
assert_failed(||{a=new Array(-1,10)},Error,'The array size must be non negative')
assert_eq([1,2,3][1..3],[2,3])
assert_eq([1,2,3][2..1],[])
assert_failed(||[1,2,3][1..4],IndexError,'Array index out of range')

m=Map {@a:5,'b':10}
assert_eq(m[@a],5)
assert_eq(m['b'],10)
assert_failed(||m[0],KeyError,"Key 0 does not exist in map")
m=new Map()
assert_failed(||m['a'],KeyError,"Key 'a' does not exist in map")
m['a']=9
assert_eq(m['a'],9)
assert_eq(m.len(),1)
assert_eq(m.contains('a'),true)
m.remove('a')
assert_eq(m.contains('a'),false)
m[1]=2
assert_eq(m[1],2)
m.clear()
assert_eq(m.len(),0)
m[1..2]=-1
assert_eq(m.contains(1..3),false)
assert_eq(m.contains(1..2),true)
for i in 0..100{
    m[i]=2*i
}
for i in 0..100{
    assert_eq(m[i],2*i)
}

// Map and array stored in register
{
    let a = [1,2]
    a[0]=7
    let m=Map{}
    m[5]=3
    assert_eq(a[0],7)
    assert_eq(m[5],3)
}

assert_eq('abc'.len(),3)
assert_eq(''.len(),0)
assert_eq(new String(),'')
assert_eq('abc'.find('bc'),1)
assert_eq('abc'.find(''),0)
assert_eq('abc'.find('x'),-1)
assert_eq('abc'.replace('bc','d'),'ad')
assert_eq('abc'.replace('','x'),'abc')
assert_eq('abc'[1..3],'bc')
assert_eq('abc'[2..1],'')
assert_failed(||'abc'[9..10],IndexError,'String index out of range')
assert_failed(||'ðŸ’–'[0..2],IndexError,'Index is not a character boundary')

assert_eq(new Range(1,2),1..2)
assert_eq((1..2).start(),1)
assert_eq((1..2).end(),2)
assert_failed(||'a'..'b',TypeError,'Expected Int and Int for the start and end of the range got String and String instead')

let {abs,sqrt, NaN,PI} = import("math")
let {random, range,shuffle} =import("random")
assert_eq(sqrt(0),0.0)
assert_failed(sqrt,ArgumentError,'Function sqrt takes 1 arguments but 0 were given')
assert_eq(PI.toInt(),3)
assert_eq(3.toFloat()===3.0,true)
assert_eq(2.toString(),'2')
assert_eq(abs(-8)===8,true)
assert_eq(NaN.isNaN(),true)
assert_eq((1.0).isNaN(),false)


assert_eq(random().getClass(),Float)
let rand=range(1,100)
assert_eq(rand.getClass()==Int and rand>=1 and rand<=100,true)

assert_eq((1..4).collect(),[1,2,3])
assert_eq('abc'.chars().collect(),['a','b','c'])
let keys=Map{9:'b','a':10}.keys().collect()
try {
    assert_eq(keys, [9,'a'])
} catch e {
    assert_eq(keys, ['a',9])
} 

assert_eq(true and false,false)
assert_eq(false or true,true)
let x=[]
false and x.push(52)
true and x.push(53)
false or x.push(54)
true or x.push(55)
assert_eq(x,[53,54])

assert_eq(eval("1+1"),2)
let n=1
assert_failed(||eval("n/0"),OverflowError,"Cannot divide 1 and 0 as the result does not fit in an Int")
assert_failed(||exec("n/0"),OverflowError,"Cannot divide 1 and 0 as the result does not fit in an Int")
assert_failed(||eval("for i in 1..2{}"),CompileError,"Expect expression")
exec("x.push(4)")
assert_eq(x[2],4)

x=1
assert_eq(x+100,101)
assert_eq(x+200,201)
assert_eq(x+1000,1001)
assert_eq(x+100_000,100_001)

a=[4,1,3,2]
a.sort(|x,y|x<y)
assert_eq(a,[1,2,3,4])
a.sort(|x,y|x>y)
assert_eq(a,[4,3,2,1])
a.clear()
a.sort(||true)
assert_eq(a,[])

let itarr=[1,2,3,4]
let iter=itarr.iter()
a=[]
iter.each(|x|a.push(x))
assert_eq(a,[1,2,3,4])
iter=itarr.iter()
assert_eq(iter.all(|x|x<10),true)
iter=itarr.iter()
assert_eq(iter.all(|x|x<4),false)
iter=itarr.iter()
assert_eq(iter.any(|x|x==3),true)
iter=itarr.iter()
assert_eq(iter.any(|x|x==5),false)
iter=itarr.iter()
assert_eq(iter.map(|x|x+1).collect(),[2,3,4,5])
iter=itarr.iter()
assert_eq(iter.filter(|x|x%2==0).collect(),[2,4])
iter=itarr.iter()
assert_eq(iter.count(),4)
iter=itarr.iter()
assert_eq(iter.reduce(|x,y|x+y,1),11)
let s=0
for i in [1,7,8].iter() {
    s+=i
}
assert_eq(s,16)

assert_failed(||import(1),TypeError,"The first argument must be a String, not Int")
assert_eq(import("assert.np").assert_eq,assert_eq)
