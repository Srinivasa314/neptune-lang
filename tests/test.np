fun assert_eq(x,y){
    if x!=y{
        throw new Error("Assertion failed: \(x)==\(y)")
    }
}

fun assert_failed(f,err_class,err_msg){
    let handled=false
    try{ 
        f()
    }catch e{
        handled=true
        if err_class!=e.getClass(){
            throw new Error("Assertion failed: \(e.getClass())==\(err_class)")
        }
        if err_msg!=e.message{
            throw new Error("Assertion failed: \(e.message)==\(err_msg)")
        }
    }
    if !handled{
        throw new Error("Assertion failed: Expected it to throw")
    }
}

assert_eq(1+1,2)
assert_eq("\(1+1)","2")
assert_eq('a'~'b','ab');
assert_eq(0.1+0.2,0.3)
assert_eq("\(1.0/0.0)", "inf")
assert_eq("\(-1.0/0.0)", "-inf")
assert_eq("\(0.0/0.0)"=="nan" or "\(0.0/0.0)"=="-nan",true)

let a=[0]
a[0]=a
assert_eq("\(a)","[ [ [ [ [ [ [ [ [ [ [ [ ... ] ] ] ] ] ] ] ] ] ] ] ]")

let m=null
for i in 0..50 {
    m=Map {@next:m}
}
assert_eq("\(m)","Map { @next: Map { @next: Map { @next: Map { @next: Map { @next: Map { @next: Map { @next: Map { @next: Map { @next: Map { @next: Map { @next: Map { ... } } } } } } } } } } } }")
assert_failed(||{let x=2147483647;x+1},OverflowError,"Cannot add 2147483647 and 1 as the result does not fit in an Int")
assert_failed(||{let x=-2147483647;x-5},OverflowError,"Cannot subtract -2147483647 and 5 as the result does not fit in an Int")
assert_failed(||{let x=1000000;x*1000000},OverflowError,"Cannot multiply 1000000 and 1000000 as the result does not fit in an Int")
assert_failed(||{let x=1;x/0},OverflowError,"Cannot divide 1 and 0 as the result does not fit in an Int")
assert_failed(||{let x=-2147483647-1;x=-x},OverflowError,"Cannot negate -2147483648 as the result cannot be stored in an Int")
assert_failed(||'a'+'b',TypeError,"Cannot add types String and String")

assert_eq(1==1.0,true)
assert_eq(!![],true)
assert_eq("a"~"b","ab")

m=Map {@a:5,'b':10}
assert_eq(m[@a],5)
assert_eq(m['b'],10)
assert_failed(||m[0],KeyError,"Key 0 does not exist in map")

a=[]
assert_failed(||a[0],IndexError, "Array index out of range")
assert_failed(||a[-1], IndexError,"Array index out of range")
assert_failed(||a[0.0], TypeError,"Array indices must be Int or Range not Float")

let i=0
if i==2{
    i=7
} else{
    i=8
}
assert_eq(i,8)

if i==8{
    i=6
}else{
    i=7
}
assert_eq(i,6)

while i<10 {
    i=i+1
}
assert_eq(i,10)

assert_failed(||{for i in 'a'..1{}},TypeError,"Expected Int and Int for the start and end of for loop got String and Int instead")
let g=null
let debug=''
for i in 1..10{
    g=i
    if i==7{
        break
    }
}
assert_eq(g,7)

g=0
for i in 1..10{
    if i==7{
        continue
    }
    g+=i
}
assert_eq(g,38)

fun fib(n){
    if n<2{
        return n
    }
    return fib(n-1)+fib(n-2)
}
assert_eq(fib(6),8)

fun f0(){}
assert_eq(f0(),null)


fun f1(){
    let a=10
    let b=20
    return ||a
    return ||b
}
assert_eq(f1()(),10)

a=[null,null,null]
for i in 0..3{
    a[i]=||i
}
assert_eq(a[0](),0)
assert_eq(a[1](),1)
assert_eq(a[2](),2)

let g3=null
fun g1(){
    let a=5;
    fun g2(){
        g3=||a
    }
    g2()
}
g1()
assert_eq(g3(),5)

fun f2(){
    let a=17
    g=||a
    throw ''
}
try{
    f2()
}
catch e{}
assert_eq(g(),17)

try{try{throw ''}catch e{g=10}}catch e{g=20}
assert_eq(g,10)

a=[1,2]
assert_eq(a.len(),2)
assert_eq(a.pop(),2)
assert_eq(a.pop(),1)
assert_failed(||a.pop(),IndexError,'Cannot pop from empty array')
a.push(3)
assert_eq(a[0],3)

class A{}
assert_failed(||new A(),NoMethodError,'Class A does not have a constructor')
class B{construct(){}f(){return 3;}}
assert_eq(new B().f(),3)
class C extends B{construct(){}f(){return super.f()+5;}}
assert_eq(new C().f(),8)
assert_eq({a:5}.a,5)
assert_eq(new Int(),0)
assert_eq(2.getClass(),Int)
assert_failed(||new 3(),TypeError,'new can be called only on classes not Int')
assert_failed(||{class A extends 3{}},TypeError,'Expected to inherit from Class got Int')
assert_failed(||{class A extends Int{}},TypeError, 'Cannot inherit from native class Int')
