const {sqrt} = import("math")
const PI = 3.141592653589793
const SOLAR_MASS = 4 * PI * PI
const DAYS_PER_YEAR = 365.24

const sun = {
  x : 0.0,
  y : 0.0,
  z : 0.0,
  vx : 0.0,
  vy : 0.0,
  vz : 0.0,
  mass : SOLAR_MASS
}
const jupiter = {
  x : 4.84143144246472090e+00,
  y : -1.16032004402742839e+00,
  z : -1.03622044471123109e-01,
  vx : 1.66007664274403694e-03 * DAYS_PER_YEAR,
  vy : 7.69901118419740425e-03 * DAYS_PER_YEAR,
  vz : -6.90460016972063023e-05 * DAYS_PER_YEAR,
  mass : 9.54791938424326609e-04 * SOLAR_MASS
}
const saturn = {
  x : 8.34336671824457987e+00,
  y : 4.12479856412430479e+00,
  z : -4.03523417114321381e-01,
  vx : -2.76742510726862411e-03 * DAYS_PER_YEAR,
  vy : 4.99852801234917238e-03 * DAYS_PER_YEAR,
  vz : 2.30417297573763929e-05 * DAYS_PER_YEAR,
  mass : 2.85885980666130812e-04 * SOLAR_MASS
}
const uranus = {
  x : 1.28943695621391310e+01,
  y : -1.51111514016986312e+01,
  z : -2.23307578892655734e-01,
  vx : 2.96460137564761618e-03 * DAYS_PER_YEAR,
  vy : 2.37847173959480950e-03 * DAYS_PER_YEAR,
  vz : -2.96589568540237556e-05 * DAYS_PER_YEAR,
  mass : 4.36624404335156298e-05 * SOLAR_MASS
}
const neptune = {
  x : 1.53796971148509165e+01,
  y : -2.59193146099879641e+01,
  z : 1.79258772950371181e-01,
  vx : 2.68067772490389322e-03 * DAYS_PER_YEAR,
  vy : 1.62824170038242295e-03 * DAYS_PER_YEAR,
  vz : -9.51592254519715870e-05 * DAYS_PER_YEAR,
  mass : 5.15138902046611451e-05 * SOLAR_MASS
}

const bodies = [sun,jupiter,saturn,uranus,neptune]

fun advance(bodies, nbody, dt){
  for i=0,nbody{
    const bi = bodies[i]
    const bix = bi.x
    const biy = bi.y
    const biz = bi.z
    const bimass = bi.mass
    let bivx = bi.vx
    let bivy = bi.vy
    let bivz = bi.vz
    for j=i+1,nbody{
      const bj = bodies[j]
      const dx = bix-bj.x 
      const dy = biy-bj.y 
      const dz = biz-bj.z
      const dist2 = dx*dx + dy*dy + dz*dz
      let mag = sqrt(dist2)
      mag = dt / (mag * dist2)
      let bm = bj.mass*mag
      bivx -= (dx * bm)
      bivy -= (dy * bm)
      bivz -= (dz * bm)
      bm = bimass * mag
      bj.vx += (dx * bm)
      bj.vy += (dy * bm)
      bj.vz += (dz * bm)
    }
    bi.vx = bivx
    bi.vy = bivy
    bi.vz = bivz
    bi.x = bix + dt * bivx
    bi.y = biy + dt * bivy
    bi.z = biz + dt * bivz
  }
}

fun energy(bodies, nbody){
  let e = 0
  for i=0,nbody{
    const bi = bodies[i]
    const vx = bi.vx
    const vy = bi.vy
    const vz = bi.vz
    const bim = bi.mass
    e = e + (0.5 * bim * (vx*vx + vy*vy + vz*vz))
    for j=i+1,nbody{
      const bj = bodies[j]
      const dx = bi.x-bj.x
      const dy = bi.y-bj.y
      const dz = bi.z-bj.z
      const distance = sqrt(dx*dx + dy*dy + dz*dz)
      e -= ((bim * bj.mass) / distance)
  }
  }
  return e
}

fun offsetMomentum(b, nbody){
  let px=0
  let py=0
  let pz=0
  for i=0,nbody{
    const bi = b[i]
    const bim = bi.mass
    px += (bi.vx * bim)
    py += (bi.vy * bim)
    pz += (bi.vz * bim)
  }
  b[0].vx = -px / SOLAR_MASS
  b[0].vy = -py / SOLAR_MASS
  b[0].vz = -pz / SOLAR_MASS
}

const N = 100
const nbody = 5

offsetMomentum(bodies, nbody)
let str="\(energy(bodies, nbody))\n"
for i=0,N{
    advance(bodies, nbody, 0.01)
}
str~="\(energy(bodies, nbody))"
panic str    
